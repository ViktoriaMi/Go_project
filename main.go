package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	//"github.com/TheBookPeople/iso3166"
	//"time"
)

type AutoGenerated struct {
	// Coord struct {
	// 	Lon float64 `json:"lon"`
	// 	Lat float64 `json:"lat"`
	// } `json:"coord"`
	Weather []struct {
		//ID          int    `json:"id"`
		//Main        string `json:"main"`
		Description string `json:"description"`
		//Icon        string `json:"icon"`
	} `json:"weather"`
	//Base string `json:"base"`
	Main struct {
		// температура в кельвинах
		Temp      float64 `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		TempMin   float64 `json:"temp_min"`
		TempMax   float64 `json:"temp_max"`
		// давление в гектопаскалях
		Pressure float64 `json:"pressure"`
		// влажность, %
		Humidity int `json:"humidity"`
	} `json:"main"`
	//Visibility int `json:"visibility"`
	Wind struct {
		Speed float64 `json:"speed"`
		//Deg   int     `json:"deg"`
	} `json:"wind"`
	Clouds struct {
		// облачность
		All int `json:"all"`
	} `json:"clouds"`
	//Dt  int `json:"dt"`
	Sys struct {
		//Type    int     `json:"type"`
		//ID      int     `json:"id"`
		//Message float64 `json:"message"`
		// код страны
		Country string `json:"country"`
		//Sunrise int     `json:"sunrise"`
		//Sunset  int     `json:"sunset"`
	} `json:"sys"`
	//Timezone int    `json:"timezone"`
	//ID       int    `json:"id"`
	// название города
	Name string `json:"name"`
	//Cod      int    `json:"cod"`
}

func weather(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Weather processing")

	location := r.URL.Query().Get("location")
	if len(location) == 0 {
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("{\"error\": \"Location parameter is requiered\"}"))
		return
	}

	// устанавливаем переменную окружения с APIKey
	os.Setenv("APIKey", "d903717989b333890700e2644c0c7a8e")

	// получаем переменную окружения в переменную
	//apikey := os.Getenv("APIKey")
	//api_key := "d903717989b333890700e2644c0c7a8e"
	//str := fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&lang=%s",
	//location, api_key, "ru")

	str := fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&lang=%s&units=metric",
		location, os.Getenv("APIKey"), "ru")

	resp, err := http.Get(str)
	if err != nil {
		log.Fatalln(err)
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	// ответ строкой
	//response := string(body)
	// печать в консоль
	//log.Println(response)
	//log.Println(time.Now().UTC())

	var data AutoGenerated
	err = json.Unmarshal(body, &data)
	if err != nil {
		log.Fatalf("Error occured during unmarshaling. Error: %s", err.Error())
	}
	// перевод из кельвинов в цельсии
	//data.Main.Temp = data.Main.Temp - 272.15
	//data.Main.FeelsLike = data.Main.FeelsLike - 272.15
	//data.Main.TempMin = data.Main.TempMin - 272.15
	//data.Main.TempMax = data.Main.TempMax - 272.15
	// перевод из гектопаскалей в мм. рт. столба
	data.Main.Pressure = data.Main.Pressure * 0.750064
	//fmt.Printf("Weather data: %#v\n", data)
	//fmt.Println()
	//fmt.Printf("Weather data: %+v\n", data)

	//fmt.Println()
	//MarshalIndent
	weathJSON, err := json.MarshalIndent(data, "", "   ")
	if err != nil {
		log.Fatalf(err.Error())
	}
	fmt.Printf("Weather data in %s:\n%s\n", location, string(weathJSON))
}

func main() {
	server := http.Server{
		Addr: "0.0.0.0:8080",
	}

	http.HandleFunc("/weather/", weather)
	server.ListenAndServe()
}
